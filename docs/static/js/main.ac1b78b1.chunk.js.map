{"version":3,"sources":["components/Pokemon.js","components/PokeList.js","App.js","index.js"],"names":["Pokemon","props","typeList","pokemon","types","map","type","key","className","id","src","url","alt","name","toUpperCase","evolution","PokeList","PokemonsList","pokelist","App","useState","pokeListFromJson","pokemons","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"myDA+BeA,MA3Bf,SAAiBC,GACf,IAAMC,EAAWD,EAAME,QAAQC,MAAMC,KAAI,SAACC,GACxC,OACE,yBAAKC,IAAKD,GACP,IACD,uBAAGE,UAAU,QAAQF,OAK3B,OACE,oCACE,yBAAKE,UAAU,oBAAoBD,IAAKN,EAAME,QAAQM,IACpD,yBAAKC,IAAKT,EAAME,QAAQQ,IAAKC,IAAI,YACjC,uCAAaX,EAAME,QAAQU,KAAKC,eAChC,yCAHF,IAG0BZ,EACxB,6BACE,8CAA4B,IACC,OAA5BD,EAAME,QAAQY,UACXd,EAAME,QAAQY,UACd,mCCVCC,MARf,SAAkBf,GAChB,IAAMgB,EAAehB,EAAMiB,SAASb,KAAI,SAACF,GACvC,OAAO,kBAAC,EAAD,CAASA,QAASA,EAASI,IAAKJ,EAAQM,QAGjD,OAAO,yBAAKD,UAAU,kBAAkBS,ICK3BE,MAXf,WAAgB,IAAD,EAC0BC,mBAASC,GAAzCC,EADM,oBAEb,OACE,yBAAKd,UAAU,OACb,6CACA,kBAAC,EAAD,CAAUU,SAAUI,MCN1BC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.ac1b78b1.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../App.css\";\n\n//Tenemos que hacer un map para recorrer \"type\", que tiene dos valores en varias ocasiones, lo podemos pasar con el nombre de la constante después\nfunction Pokemon(props) {\n  const typeList = props.pokemon.types.map((type) => {\n    return (\n      <div key={type}>\n        {\" \"}\n        <p className=\"type\">{type}</p>\n      </div>\n    );\n  });\n  //Aquí pasamos una a una todas las propiedades. En la última hay que hacer un if porque no podemos pasarlo por default props. Tienen valor de null, así que siempre se va a pasar algo y el defaultProps no va a funcionar\n  return (\n    <>\n      <div className=\"pokemon-container\" key={props.pokemon.id}>\n        <img src={props.pokemon.url} alt=\"Pokemon\"></img>\n        <h3> Name : {props.pokemon.name.toUpperCase()}</h3>\n        <strong>Type:</strong> {typeList}\n        <div>\n          <strong>Evolution:</strong>{\" \"}\n          {props.pokemon.evolution !== null\n            ? props.pokemon.evolution\n            : \"This pokemon does not evolve\"}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Pokemon;\n","import React from \"react\";\nimport \"../App.css\";\nimport Pokemon from \"./Pokemon\";\n\n//Aquí es .pokelist porque es el parámetro con nombramos la lista de pokemons que a su vez venía del estado y este del json\n//El parámetro del map es inventado, puede ser el que queramos\nfunction PokeList(props) {\n  const PokemonsList = props.pokelist.map((pokemon) => {\n    return <Pokemon pokemon={pokemon} key={pokemon.id} />;\n  });\n  //Solo queremos que esta lista nos devuelva un único pokemon por cada uno de la lista, será en el archivo Pokemon donde especifiquemos qué queremos dentro de cada uno\n  return <div className=\"main-container\">{PokemonsList}</div>;\n}\n\nexport default PokeList;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport pokeListFromJson from \"./data/pokelist.json\";\nimport PokeList from \"./components/PokeList\";\n\nfunction App() {\n  const [pokemons /* , setPokemon] */] = useState(pokeListFromJson); //Pasamos el json por el estado aunque en este caso no necesitamos la función porque no hay eventos\n  return (\n    <div className=\"App\">\n      <h1>My Pokédex</h1>\n      <PokeList pokelist={pokemons} />\n    </div>\n  );\n}\n//pokemons = pokeListFromJson, que la pasamos como prop a PokeList, así la encontraremos allí (pokelist)\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}